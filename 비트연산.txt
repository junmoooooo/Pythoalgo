마스킹?
이진법 기억하지?
부분집합 알고리즘
& 와 and는 다르다.

set에 리스트는 안들어가져...?

&의 좌우가 set이면 교집합 십진수면 비트연산의 결과도 십진수

print(6 & 3)  # 결과는 2입니다.

# 1 1 0 => 6
# 0 1 1 => 3  => 자리수가 모자란 경우 왼쪽에 0이 채워진다고 생각합니다.
# ----&----- 
# 0 1 0 => 2

& 둘다 1이 있으면
| 둘중 하나라도 1이 있으면

비트검출 -> & 와 | 를 사용하자!



# 왼쪽 한 칸 & 두 칸 이동
print(7 << 1)  # 14가 답이 됩니다.
print(7 << 2)  # 28이 답이 됩니다.

print(m << n) m을 2의 n승으로 곱한다. 

# 1 1 1
# <<
# 1 1 1 0 => 14
# <<
# 1 1 1 0 0 => 28
따라서 비트를 1칸 왼쪽으로 이동시킬때마다, 십진수 기준으로는 2배씩 늘어납니다.
연산자 오른쪽의 수만큼 2의 지승으로 곱한다.


# 오른쪽으로 이동
print(7 >> 1)  # 3이 답이 됩니다. (7을 2로 나눈 몫)
print(27 >> 2) # 6이 답이 됩니다. (27을 4로 나눈 몫) => 2의 2승으로 나눈 몫
print(415 >> 4) # 25가 답이 됩니다. (415를 16으로 나눈 몫)

print(m >> n) m을 2의 n승으로 나눈 나머지.

연산자 오른쪽의 수만큼 2의 지승으로 나눈 몫.
계산의 결과 사라지는 부분은 나머지 부분!





^ (xor) (exclusive or, 배타적논리쌍)
print(6 ^ 3)  # 결과는 5입니다.

# 1 1 0 => 6
# 0 1 1 => 3  => 자리수가 모자란 경우 왼쪽에 0이 채워진다고 생각합니다.
# ----^----- 
# 1 0 1 => 5



부분집합 = 모든 조합?




마스킹?? 검출?

1. 표시
    visited & ( 1 << after)
    visited |  ( 1 << after)

2. 확인
